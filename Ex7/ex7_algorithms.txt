1. check_in_reg_range:

$t0 = %int_register
$t1 = %lower_bound
$t2 = %upper_bound
if ($t0 < $t1), return 0;
if ($t0 > $t2), return 0;
return 1;

2. check_label:

$t0 = i = 0
$a0 = str = %string_reg
$a1 = str[i]
$v1 = length = %string_reg.length
while (i < length){
	if (i = 0){
		if (str[i] is an alphabetic character{
			i++;
			continue;
		}
		return 1;
	}
	if (str[i] is a numerical or alphabetic character){
		i++;
		continue
	} 
	if (str[i] == ‘_’) {
		i++;
continue;
	}
	return 0;
}
return 1;

3. check_substring_appearance:

$t2 = str = %string_reg
$t3 = substr = %substring_reg
str.split_by_literal_separator(str, ‘ ‘)
firsthalf = $a2
secondhalf = $a3
if (strcmp(firsthalf, substr) == 0) return 1;
while (firsthalf != null){
	secondhalf.split_by_literal_separator(secondhalf, ‘ ‘)
	firsthalf = $a2
	if (strcmp(firsthalf, substr) == 0) return 1;
}
return 0;

4. is_hexa:

$t0 = i = 0
$a0 = str = %register_string

if (str[i++] != ‘0’) return invalid;
if (str[i] != ‘x’ || str[i] != ‘X’) return invalid; 
// $t1 = number part after ‘0x’
$t1 = &str[++i]
$t4 = countZeroes = -1
//get the first non-zero character -> $t1
do{
	$t5 = str[i];
	if ($t5 == ‘\0’){
		if ($t5.length == 0) return invalid; 
		return valid;
	}
	i++;
	countZeroes++;
} while ($t5 == ‘0’);
$t1 = $t5 = str[i++];
$a1 = &str[i] 			// get number part without ‘0’(es)
while ($t5 != ‘\0’){
	$t5 = str[i];
	if ($t5 is not a numerical character or in [‘A’, ‘F’] or [‘a’,’f’] return invalid;
	i++;
	if (i > 10) return invalid;
	if (i == 10){
		// check if the first non-zero char has sign bit
		// if before sign bit we have 0 -> overflow
		if ($t1 in [8,0] or in [A, F] or in [a,f]){
			if (countZeroes == 0) continue;
			return invalid;
		}
	}
}
$v1 = convert_num_hex($a1)
return valid;

